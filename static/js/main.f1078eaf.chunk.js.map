{"version":3,"sources":["components/search/Search.js","components/result/Result.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","react_default","a","createElement","className","onSubmit","handleCitySubmit","type","value","onChange","handleInputChange","placeholder","Result","_props$weather","weather","date","city","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","Fragment","concat","APIKey","App","state","e","_this","setState","target","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","prevState","sys","main","speed","catch","console","log","search_Search","this","result_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1078eaf.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Search = (props) => {\r\n    return ( \r\n     \r\n        <form className=' ' onSubmit={props.handleCitySubmit}>\r\n        \r\n            <input \r\n                className = 'inpClass'\r\n                type=\"text\" \r\n                value={props.value} \r\n                onChange={props.handleInputChange} \r\n                placeholder='Enter the City'/>\r\n                \r\n            <button className=' btnClass'>\r\n                Search the City\r\n            </button>\r\n        \r\n        </form>\r\n \r\n     )\r\n}\r\n \r\nexport default Search;","import React from 'react';\r\n\r\nconst Result = (props) => {\r\n\r\n    const{date, city, sunrise, sunset, temp, pressure, wind, err} = props.weather\r\n\r\n    let content= null;\r\n\r\n    if(!err && city){\r\n        const sunriseTime = new Date(sunrise*1000).toLocaleTimeString()\r\n        const sunsetTime = new Date(sunset*1000).toLocaleTimeString()\r\n        \r\n        content = (\r\n            <div className='row'>\r\n                <div className='col col-12 col-md-6 mycolumn1'>\r\n                    <p className='city'>City: <strong>{city}</strong></p>\r\n                    <p>Date and time: {date}</p>\r\n                </div>\r\n                <div className='row line'></div>\r\n                <div className='col col-12 col-md-6 mycolumn2'>\r\n                    <p>Temperature: <strong>{temp} &#176;C</strong></p>\r\n                    <p>Sunrise: <strong>{sunriseTime}</strong></p>\r\n                    <p>Sunset: <strong>{sunsetTime}</strong></p>\r\n                    <p>Pressure: <strong>{pressure} hPa</strong></p>\r\n                    <p>Wind velocity: <strong>{wind} m/s</strong></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {err ? `There is no such a city in the database: ${city}` : content}\r\n        </>\r\n      )\r\n}\r\n \r\nexport default Result;","import React, {Component} from 'react';\nimport './App.css';\nimport Search from './components/search/Search'\nimport Result from './components/result/Result'\n\nconst APIKey = 'c15e19c5524c0e99c9ad66fd1632e8bf'\n\nclass App extends Component{\n  state={\n    value:'',\n    date:'',\n    city:'',\n    sunrise:'',\n    sunset:'',\n    temp:'',\n    pressure:'',\n    wind:'',\n    err: false,\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  handleCitySubmit = (e) => {\n    e.preventDefault()\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n    fetch(API)\n    .then(response => {\n      if(response.ok){\n        return response\n      }\n      throw Error('Error trying to get the data')\n    })\n    .then(response => response.json())\n    .then (data => {\n      const time = new Date().toLocaleString()\n      this.setState(prevState =>({\n        err: false,\n        date:time,\n        city:prevState.value,\n        sunrise: data.sys.sunrise,\n        sunset:data.sys.sunset,\n        temp:data.main.temp,\n        pressure:data.main.pressure,\n        wind:data.wind.speed,\n      }))\n    })\n    .catch(err => {\n      console.log(err)\n      this.setState(prevState => ({\n        err: true,\n        city: prevState.value\n      }))\n    })\n  }\n\n  render(){\n    return (\n    \n        <div className='container'>\n          <div className='mycontainer'>\n              <Search \n                value={this.state.value} \n                handleInputChange={this.handleInputChange}\n                handleCitySubmit={this.handleCitySubmit}\n              />\n          </div>\n\n            <Result \n              weather={this.state}\n            />\n        </div>\n    \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}